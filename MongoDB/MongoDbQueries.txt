1. Find products where unitsinstock is zero, 
db.products.find({"UnitsInStock":0})
db.users.find({"age" :47})

2. Filter output and display selected columns, excluding _id column
db.products.find({"UnitsInStock":0}, {_id:0, "ProductId":1, "ProductName":1, UnitsInStock:1})
db.users.find({age:47}, {_id:0, name:1, status:1})

3. Filter products where unitsinstock > 0 and < 50
db.products.find({"UnitsInStock":{"$gte":0, "$lte":50}}, {_id:0, "ProductId":1, "ProductName":1, UnitsInStock:1})
db.users.find({age:{"$gte" :40, "$lte": 80}},{_id:0, name:1, age:1})

4. Create a filteroutput columns list 
outputColumns = {"_id":0, "ProductId":1, "ProductName":1, "UnitPrice":1, "UnitsInStock":1}
db.products.find({}, outputColumns)
outputColumns={_id :0, name :1, age:1, status:1}
db.users.find({},outputColumns)

5. $ne filter 
db.products.find({"CategoryId": {"$ne" : "2"}}, outputColumns)
db.users.find({name : {"$ne" : "Shankar" }}, outputColumns)

6. $in and $nin operator 
db.products.find({"CategoryId":{"$in": ["1","2"]}}, outputColumns)
db.products.find({"CategoryId":{"$nin": ["1","2","3","4","5","6"]}}, outputColumns)
db.users.find({name : {"$in": ["Shankar","Santhosh"]}}, outputColumns)
db.users.find({name : {"$nin": ["Shankar","Santhosh"]}}, outputColumns)

7. $or Queries 
db.products.find({"$or" :[{"UnitsInStock" :{"$gte":5}},{"CategoryId":{"$in":["1","2","3"]}}]}, outputColumns)
db.users.find({"$or" :[{name : {"$eq" : "Shankar"}}, {status : {"$eq" : "Approved"}}]}, outputColumns)

8. $and Queries 
db.products.find({"$and" :[{"UnitsInStock" :{"$gte":20}},{"CategoryId":{"$in":["1","2"]}}]}, outputColumns)
db.users.find({"$and" :[{name : {"$eq" : "Swarna"}},  {status : {"$eq" : "Approved"}}]}, outputColumns)

9. $not queries 
db.products.find({"$and" :[{"UnitsInStock" :{"$not": {"$gte":10}}},{"CategoryId":{"$in":["1","2"]}}]}, outputColumns)
db.users.find({age :{"$not" :{"$gt" : 80}}}, outputColumns)

10. $nor queries 
db.products.find({"$nor" :[{"UnitsInStock" :{"$not": {"$gte":50}}},{"UnitPrice":{"$gte":10}}]}, outputColumns)


11.sorting and limiting rows 
db.products.aggregate( [ {$sort: {"UnitsInStock":1, "ProductName":-1}},     {$limit:10}])
db.users.aggregate([ {$sort: { age:1, name: -1}})

12, Group operators 
db.products.aggregate([{$group : {_id:{ catId:"$CategoryId"}, totalValue:{$sum:{$multiply:["$UnitPrice","$UnitsInStock"] }},count:{$sum:1}}},{$sort:{"totalValue":1}}])
















